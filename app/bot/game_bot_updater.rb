class GameBotUpdater
  attr_accessor :store, :text, :options

  def self.perform store, text, options
    self.new(store, text, options).perform
  end

  def initialize store, text, options
    self.store = store
    self.text = text
    self.options = options
  end

  def perform
    parse_state
    parse_options
    parse_pipboy
    parse_stock
    parse_new_location
    parse_used_potion
    parse_used_food
    parse_received
    parse_final
    store
  end

  def parse_options
    # if DUNGEONS.find{|key, val| options.include?(val)}
    #   self.state = key
    if options.include?(GameBotActor::ACTIONS[:check_home])
      store.state = :waiting_at_home
    elsif options.include?(GameBotActor::ACTIONS[:check_home_engineer])
      store.state = :waiting_at_home
    elsif options.include?(GameBotActor::ACTIONS[:check_newreno])
      store.state = :waiting_at_newreno
    elsif options.include?(GameBotActor::ACTIONS[:move])
      store.state = :waiting_to_move
    elsif options.include?(GameBotActor::ACTIONS[:fight])
      store.state = :waiting_to_fight
    end
  end

  def parse_pipboy
    if text.include?('–§—Ä–∞–∫—Ü–∏—è')
      store.hp, store.max_hp = text.lines.find{|l| l.include?('–ó–¥–æ—Ä–æ–≤—å–µ')}.split(": ").last.split('/').map(&:to_i)
      store.hunger = text.lines.find{|l| l.include?('–ì–æ–ª–æ–¥')}.split(": ").last.split('/').last.to_i
      store.path = text.lines.find{|l| l.include?('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ')}.split(": ").last.split('/').last.to_i
      store.caps = text.lines.find{|l| l.include?('–ö—Ä—ã—à–∫–∏')}.split(": ").last.to_i

      if store.state.nil?
        store.state = :initial_pipboy
      end
    end
  end

  def parse_stock
    if text.lines[1].to_s.include?('–°–û–î–ï–†–ñ–ò–ú–û–ï –†–Æ–ö–ó–ê–ö–ê')
      GameBot::POTIONS.each do |potion|
        count = 0
        if text.include?(potion[:name])
          line = text.lines.find{|l| l.include?(potion[:name])}
          count = line[0..-3].gsub(/[^\d]/, '').to_i
          count = 1 if count == 0
        else
          count = 0
        end
        store.send("#{potion[:key]}=", count)
      end
      if store.state == :initial_pipboy
        store.state = :initial_stock
      end
    end
  end

  def parse_state
    if text.include?('–¢—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ü—É—Å—Ç–æ—à–∏.')
      store.state = :waiting
    end

    if text.include?('–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –¥–∞–ª—å—à–µ') or text.include?('–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∏—Å–∫–∞—Ç—å –ø—Ä–∏–ø–∞—Å—ã –≤ –ü—É—Å—Ç–æ—à–∏.')
      store.state = :walking
    end

    if text.include?('–¢—ã —Ä–µ—à–∏–ª –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å—Ö–≤–∞—Ç–∫—É —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º')
      store.state = :fighting
    end

    if text.include?('–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ª–∞–≥–µ—Ä—å')
      store.state = :walking_to_home
    end

    if text.include?('–¢—ã –ø–æ–∫–∏–Ω—É–ª —Å–≤–æ–π –ª–∞–≥–µ—Ä—å –∏ –Ω–∞–ø—Ä–∞–≤–∏–ª—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –∫—Ä—É–ø–Ω–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ.')
      store.state = :walking_to_newreno
    end

    if text.include?('–ù–µ–∫–æ–≥–¥–∞ –∑–¥–µ—Å—å –±—ã–ª –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π')
      store.state = :waiting_at_newreno
    end

    if text.include?('–ú–∞–ª–æ –∫—Ä—ã—à–µ–∫!')
      store.state = :spent_all_caps
    end

    if text.include?('–¢—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –∏ –Ω–µ –º–æ–∂–µ—à—å –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.')
      sleep(60)
    end
  end

  def parse_new_location
    unless text.include?('–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      [0,1,2].each do |i|
        if text.lines[i].to_s.start_with?('‚ù§')
          items = text.lines[i].split(' ')
          store.hp, store.max_hp = items[0][1..-1].split('/').map{|a| a.gsub(/[^\d]/, '')}.map(&:to_i)
          store.hunger = items[1][1..-1].to_i
        end

        if text.lines[i+1].to_s.start_with?('üë£')
          store.path = text.lines[i+1][1..-1].to_i
        end
      end
    end
  end

  def parse_used_potion
    if line = text.lines.find{|l| l.include?('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:')}
      GameBot::POTIONS.each do |potion|
        if line.include?(potion[:name])
          val = store.send(potion[:key])
          val -= 1
          store.send("#{potion[:key]}=", val)
          store.hp, store.max_hp = text.lines.last.split('(').first.split('/').map{|a| a.gsub(/[^\d]/, '')}.map(&:to_i)
        end
      end
    end
  end

  def parse_used_food
    if line = text.lines.find{|l| l.include?('–£—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞: ')}
      store.hunger = line.gsub(/[^\d]/, '').to_i
    end
  end

  def parse_received
    if line = text.lines.find{|l| l.include?('–ü–æ–ª—É—á–µ–Ω–æ')}
      GameBot::POTIONS.each do |potion|
        if line.include?(potion[:name])
          val = store.send(potion[:key])
          val += 1
          store.send("#{potion[:key]}=", val)
        end
      end
    end
  end

  def parse_final
    if store.state == :waiting_to_fight
      if text.include?('–ê–Ω–∫–ª–∞–≤') or text.include?('–ü–æ–¥–Ω–∏–º–∞–µ—Ç —Å–≤—è–∑–∏ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ')
        store.state = :flee
      end
    end
  end
end